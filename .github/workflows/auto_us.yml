name: Auto US

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'ID de l issue à traiter'
        required: true
        type: number
  push:
    branches: [auto-US-OMG]
  issues:
    types: [opened, edited, reopened]

jobs:
  auto_us:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        cd .github/workflows/auto_us
        pip install -r requirements.txt

    # Récupération de l'issue selon l'événement déclencheur
    - name: Get issue (from workflow_dispatch)
      id: get_issue_dispatch
      if: github.event_name == 'workflow_dispatch'
      run: |
        ISSUE_NUMBER=${{ github.event.inputs.issue_number }}
        RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                         -H "Accept: application/vnd.github.v3+json" \
                         https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER)

        ISSUE_TITLE=$(echo "$RESPONSE" | jq -r '.title')
        ISSUE_BODY=$(echo "$RESPONSE" | jq -r '.body')

        echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
        echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
        echo "issue_body=$ISSUE_BODY" >> $GITHUB_OUTPUT

    - name: Get issue (from issues event)
      id: get_issue_event
      if: github.event_name == 'issues'
      run: |
        ISSUE_NUMBER="${{ github.event.issue.number }}"
        ISSUE_TITLE="${{ github.event.issue.title }}"
        ISSUE_BODY="${{ github.event.issue.body }}"

        echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
        echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
        echo "issue_body=$ISSUE_BODY" >> $GITHUB_OUTPUT

    # Récupérer les User Stories via GitHub API
    - name: Fetch User Stories from GitHub
      id: fetch_us
      run: |
        RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                         -H "Accept: application/vnd.github.v3+json" \
                         "https://api.github.com/repos/${{ github.repository }}/issues?labels=user%20story")

        US=$(echo "$RESPONSE" | jq -c '[.[] | {id: .number, title: .title}]')

        echo "us=$US" >> $GITHUB_OUTPUT

    # Vérifier si le body contient une chaîne spécifique (ex: STOP)
    - name: Check for specific string in issue body
      run: |
        if echo "${{ steps.get_issue_dispatch.outputs.issue_body }}" | grep -q "<!-- ALREADY DONE -->"; then
          echo "The issue body contains a forbidden string. Stopping workflow."
          exit 0
        fi
        if echo "${{ steps.get_issue_event.outputs.issue_body }}" | grep -q "<!-- ALREADY DONE -->"; then
          echo "The issue body contains a forbidden string. Stopping workflow."
          exit 0
        fi

    # Appeler le programme Python en lui envoyant les variables et la clé API OpenAI
    - name: Run Python script with issue details
      id: run_python
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          issue_number="${{ steps.get_issue_dispatch.outputs.issue_number }}"
          issue_title=$(echo "${{ steps.get_issue_dispatch.outputs.issue_title }}" | jq -Rr @sh)
          issue_body=$(echo "${{ steps.get_issue_dispatch.outputs.issue_body }}" | jq -Rr @sh)
        elif [ "${{ github.event_name }}" == "issues" ]; then
          issue_number="${{ steps.get_issue_event.outputs.issue_number }}"
          issue_title=$(echo "${{ steps.get_issue_event.outputs.issue_title }}" | jq -Rr @sh)
          issue_body=$(echo "${{ steps.get_issue_event.outputs.issue_body }}" | jq -Rr @sh)
        fi
        us=$(echo "${{ steps.fetch_us.outputs.us }}" | jq -Rr @sh)

        result=$(python3 .github/workflows/auto_us/define_us.py "${{ secrets.OPENAI }}" "$issue_number" "$issue_title" "$issue_body" "$us")
        echo "$result"
        echo "result=$result" >> $GITHUB_OUTPUT

    # Afficher le résultat du script Python
    - name: Display Python script result
      run: |
        echo "Résultat du script Python : ${{ steps.run_python.outputs.result }}"
