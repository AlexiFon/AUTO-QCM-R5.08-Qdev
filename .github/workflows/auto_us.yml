name: Auto US

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'ID de l issue à traiter'
        required: true
        type: number
  push:
    branches: [auto-US-OMG]
  issues:
    types: [opened, edited, reopened]

jobs:
  auto_us:
    runs-on: ubuntu-latest
    permissions:
      issues: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        cd .github/workflows/auto_us
        pip install -r requirements.txt

    # Récupération de l'issue selon l'événement déclencheur
    - name: Get issue (from workflow_dispatch)
      id: get_issue_dispatch
      if: github.event_name == 'workflow_dispatch'
      run: |
        ISSUE_NUMBER=${{ github.event.inputs.issue_number }}
        RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                         -H "Accept: application/vnd.github.v3+json" \
                         https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER)

        ISSUE_TITLE=$(echo "$RESPONSE" | jq -r '.title')
        ISSUE_BODY=$(echo "$RESPONSE" | jq -r '.body')

        echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
        echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
        echo "issue_body=$ISSUE_BODY" >> $GITHUB_OUTPUT

    - name: Get issue (from issues event)
      id: get_issue_event
      if: github.event_name == 'issues'
      run: |
        ISSUE_NUMBER="${{ github.event.issue.number }}"
        ISSUE_TITLE="${{ github.event.issue.title }}"
        ISSUE_BODY="${{ github.event.issue.body }}"

        echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
        echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
        echo "issue_body=$ISSUE_BODY" >> $GITHUB_OUTPUT

    # Récupérer les User Stories via GitHub API
    - name: Fetch User Stories from GitHub
      id: fetch_us
      run: |
        RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                         -H "Accept: application/vnd.github.v3+json" \
                         "https://api.github.com/repos/${{ github.repository }}/issues?labels=user%20story")

        US=$(echo "$RESPONSE" | jq -c '[.[] | {id: .number, title: .title}]')

        echo "us=$US" >> $GITHUB_OUTPUT

    # Vérifier si le body contient une chaîne spécifique (ex: STOP)
    - name: Check for specific string in issue body (workflow_dispatch)
      if: github.event_name == 'workflow_dispatch'
      run: |
        if echo "${{ steps.get_issue_dispatch.outputs.issue_body }}" | grep -q "<!-- ALREADY DONE -->"; then
          echo "The issue body contains a forbidden string. Stopping workflow."
          exit 0
        fi

    - name: Check for specific string in issue body (issues event)
      if: github.event_name == 'issues'
      run: |
        if echo "${{ steps.get_issue_event.outputs.issue_body }}" | grep -q "<!-- ALREADY DONE -->"; then
          echo "The issue body contains a forbidden string. Stopping workflow."
          exit 0
        fi

    # Appeler le programme Python en lui envoyant les variables et la clé API OpenAI
    - name: Run Python script with issue details
      id: run_python
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI }}
        ISSUE_NUMBER: ${{ steps.get_issue_dispatch.outputs.issue_number || steps.get_issue_event.outputs.issue_number }}
        ISSUE_TITLE: ${{ steps.get_issue_dispatch.outputs.issue_title || steps.get_issue_event.outputs.issue_title }}
        ISSUE_BODY: ${{ steps.get_issue_dispatch.outputs.issue_body || steps.get_issue_event.outputs.issue_body }}
        US: ${{ steps.fetch_us.outputs.us }}
      run: |
        # Afficher les variables nettoyées pour vérification (optionnel)
        echo "ISSUE_NUMBER: $ISSUE_NUMBER"
        echo "ISSUE_TITLE: $ISSUE_TITLE"
        echo "ISSUE_BODY: $ISSUE_BODY"
        echo "US: $US"

        # Appeler le script Python sans passer d'arguments
        python3 .github/workflows/auto_us/auto_us.py

    # Afficher le résultat du script Python
    - name: Display Python script result
      run: |
        echo "Résultat du script Python :"
        cat .github/workflows/auto_us/result.txt

    # Ajouter la réponse de GPT à la description de l'issue
    - name: Append GPT response to issue body
      if: success()
      run: |
        # Lire la réponse de GPT
        GPT_RESPONSE=$(cat .github/workflows/auto_us/result.txt)

        # Lire le body actuel de l'issue
        EXISTING_BODY="${{ steps.get_issue_dispatch.outputs.issue_body || steps.get_issue_event.outputs.issue_body }}"

        # Ajouter la réponse de GPT à la fin
        UPDATED_BODY="${EXISTING_BODY}\n\n${GPT_RESPONSE}"

        # Mettre à jour l'issue via l'API GitHub
        curl -s -X PATCH -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/repos/${{ github.repository }}/issues/${{ steps.get_issue_dispatch.outputs.issue_number || steps.get_issue_event.outputs.issue_number }} \
             -d "{\"body\": \"${UPDATED_BODY}\"}"
