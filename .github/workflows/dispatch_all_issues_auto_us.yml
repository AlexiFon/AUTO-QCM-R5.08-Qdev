# .github/workflows/process_non_us_issues.yml
name: Process Non-User Story Issues

on:
  workflow_dispatch:

jobs:
  fetch_non_us_issues:
    runs-on: ubuntu-latest
    outputs:
      issue_numbers: ${{ steps.fetch_issues.outputs.issue_numbers }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install requests

      - name: Fetch non-user story issues
        id: fetch_issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          import os
          import requests
          import json

          repo = os.getenv('GITHUB_REPOSITORY')
          token = os.getenv('GITHUB_TOKEN')

          headers = {
              'Authorization': f'token {token}',
              'Accept': 'application/vnd.github.v3+json'
          }

          # Récupérer toutes les issues ouvertes, excluant les pull requests
          issues = []
          page = 1
          per_page = 100
          while True:
              response = requests.get(
                  f'https://api.github.com/repos/{repo}/issues',
                  headers=headers,
                  params={
                      'state': 'open',
                      'per_page': per_page,
                      'page': page
                  }
              )
              response.raise_for_status()
              data = response.json()
              if not data:
                  break
              issues.extend(data)
              if len(data) < per_page:
                  break
              page += 1

          # Filtrer les issues qui ne sont pas des pull requests et qui n'ont pas le label 'user story'
          non_us_issues = [
              issue for issue in issues
              if 'pull_request' not in issue and
                 not any(label['name'].lower() == 'user story' for label in issue.get('labels', []))
          ]

          issue_numbers = [issue['number'] for issue in non_us_issues]

          print(f"Non-User Story Issues: {issue_numbers}")

          # Définir la sortie au format JSON en utilisant GITHUB_OUTPUT
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"issue_numbers={json.dumps(issue_numbers)}\n")
